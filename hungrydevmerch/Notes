-install redux, react-redux, redux-logger
-import Provider in index.js,wrap all components in Provider.
-create root-reducer.js - represents all state in applcation
-create individual reducer.js files , then import onto the root
-create store.js, import from redux
-import store onto index.jx and pass it to the provider
-create action

-in component to integrate store, import connect from redux, 
create mappings to get state from the store as props
mappings - state.(from Root-Reducer property).(from individual-reducer return property)

const mapStateToProps = ({  RootReducerProp}) => ({
    reducerProp: RootReducerProp.reducerProp
})

i.e
const mapStateToProps = ({ user }) => ({
    currentUser: user.currentUser
})


-in app.js import connect from react-redux,import action, 
create mapDispatchToProps  = (dispatch) =>({actionName: dispatch(action(payload))})
connect(null,mapDispatchToProps)(App). remove constructor, change the this.setState 
to this.props.Action({data:})

-import the action to the component that will set or toggle the action,
import the connect from react-redux like from previous step

store<--root-reducer<---individual-reducers
<--individual-actions<--mappings<--dispatcher

##Create Selectors so things dont get re-rendered when an unrelated state change occurs
we only want to get a slice of the state
-install reselect
create .Selectors.js in redux folder 
-import {createSelector} from 'reselect'
-const selectCart = (state) => state.reducerProp;
-export a function that returns a function that takes a state as an array of state 
as an input, second argument as a callback function to define what to return
export const selectCartItems = createSelector([selectCart], 
                                            cart => cart.cartItems)
import selectCartItems to componenent and in to
mapStateToProps, pass entire state to mapStateToProps and 
pass state to selectCartItems for the prop.
-if multiple select is used in a component, we can use createStructuredSelector
in mamStateToProps
mamStateToProps = createStructuredSelector({prop: selector, prop: selector})


